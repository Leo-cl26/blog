<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>理论 on Leocl&#39;s blog</title>
    <link>https://http://www.leocl.space/tags/%E7%90%86%E8%AE%BA/</link>
    <description>Recent content in 理论 on Leocl&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://http://www.leocl.space/tags/%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数值计算方法:9-常微分方程初值问题数值解法</title>
      <link>https://http://www.leocl.space/post/2022/07/25/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%959-%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/07/25/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%959-%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/</guid>
      <description>9.1 引言 常微分方程是数学中的一个重要分支，它主要研究未知函数的导数与自变量之间的关系。而常微分方程初值问题数值解法，就是通过数值计算的方法，求出一个微分方程在给定初始值下的解。这个问题在科学、工程、经济等领域中都有广泛的应用，因此其研究具有重要的理论和实际意义。
9.2 简单的数值方法 在解决常微分方程初值问题时，最简单的思路就是把微分方程看成一个离散的数值问题。即将自变量分割成若干个等分的小段，并在每个小段上近似求得未知函数的值。这样的数值方法又称为离散化方法。
常用的离散化方法有欧拉法、后退欧拉法、梯形方法和改进欧拉公式等。下面将逐一介绍。
9.2.1 欧拉法和后退欧拉法 欧拉法是最简单的数值方法之一，它的基本思路是根据微分方程中的导数来近似求解未知函数的值。具体来说，我们可以将微分方程中的导数用差商来近似，从而得到未知函数的逼近值。
设 $y(t)$ 是常微分方程初值问题的解，$t_n=n\Delta t$，$y_n$ 是 $y(t)$ 在 $t_n$ 处的近似值，则欧拉法的递推公式为：
$y_{n+1}=y_n+\Delta t f(t_n,y_n)$
其中 $f(t,y)$ 表示微分方程右端的函数，也即导数。欧拉法的基本思想就是在每个小段上用该式近似求解 $y(t)$ 的值。
欧拉法的局限性在于其精度较低，误差随着步长的增加而增大。因此，我们可以考虑使用一些更为精细的数值方法来提高精度。
后退欧拉法是一种比欧拉法更为精确的数值方法，它的基本思路是在每个小段上使用微分方程在下一个时间点的导数来近似求解未知函数的值。具体来说，我们可以将微分方程中的导数用差商来近似，从而得到未知函数的逼近值。
设 $y(t)$ 是常微分方程初值问题的解，$t_n=n\Delta t$，$y_n$ 是 $y(t)$ 在 $t_n$ 处的近似值，则后退欧拉法的递推公式为：
$y_{n+1}=y_n+\Delta t f(t_{n+1},y_{n+1})$
其中 $f(t,y)$ 表示微分方程右端的函数，也即导数。后退欧拉法的基本思想就是在每个小段上用该式近似求解 $y(t)$ 的值。
9.2.2 梯形方法 梯形方法是一种更为精确的数值方法，它的基本思路是将微分方程中的导数用两个时间点的平均值来近似。具体来说，我们可以将微分方程中的导数用差商来近似，从而得到未知函数的逼近值。
设 $y(t)$ 是常微分方程初值问题的解，$t_n=n\Delta t$，$y_n$ 是 $y(t)$ 在 $t_n$ 处的近似值，则梯形方法的递推公式为：
$y_{n+1}=y_n+\frac{\Delta t}{2}[f(t_n,y_n)+f(t_{n+1},y_n+\Delta t f(t_n,y_n))]$
其中 $f(t,y)$ 表示微分方程右端的函数，也即导数。梯形方法的基本思想就是在每个小段上用该式近似求解 $y(t)$ 的值。
9.2.3 改进欧拉公式 改进欧拉公式是一种更为精确的数值方法，它的基本思路是在欧拉法的基础上加入了导数在两个时间点上的平均值。具体来说，我们可以将微分方程中的导数用差商来近似，从而得到未知函数的逼近值。</description>
    </item>
    
    <item>
      <title>数值计算方法:8-矩阵特征值计算</title>
      <link>https://http://www.leocl.space/post/2022/07/09/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%958-%E7%9F%A9%E9%98%B5%E7%89%B9%E5%BE%81%E5%80%BC%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/07/09/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%958-%E7%9F%A9%E9%98%B5%E7%89%B9%E5%BE%81%E5%80%BC%E8%AE%A1%E7%AE%97/</guid>
      <description>8.1. 特征值性质和估计 8.1.1. 特征值问题及其性质 定义：设$A$是$n$阶方阵，$\lambda$是一个数，如果存在一个非零向量$x$使得$Ax=\lambda x$，则称$\lambda$是$A$的特征值，$x$是对应于特征值$\lambda$的特征向量。
特征值问题是求解$Ax=\lambda x$的$\lambda$和$x$的问题。特征值问题是矩阵计算中最重要的问题之一，具有广泛的应用背景。例如，特征值和特征向量可以用于谱聚类、主成分分析和矩阵对角化等领域。
特征值问题的另一个重要性质是：对于一个$n$阶方阵，它的特征值个数等于$n$。这个性质被称为代数重数定理。如果$\lambda$是$A$的特征值，并且对应于$\lambda$的特征向量有$k$个，那么称$\lambda$的代数重数为$k$。代数重数是特征值问题中的另一个重要概念。
特征值问题还有一个重要性质：一个$n$阶方阵$A$是可对角化的当且仅当它的$n$个特征向量线性无关。这个性质是特征值问题的一个重要应用。
8.1.2. 特征值估计与扰动 特征值的计算通常需要使用数值方法。特征值估计和扰动是两种常见的数值方法。
特征值估计是指在一定误差范围内估计特征值的值。常用的特征值估计方法包括幂法和反幂法。
特征值扰动是指在特征值计算过程中引入一些扰动，以便加速特征值的计算。常用的特征值扰动方法包括Wielandt迭代和QR迭代。
8.2. 幂法与反幂法 8.2.1. 幂法 幂法是求解特征值和对应特征向量的一种迭代方法。幂法的基本思想是：通过不断地乘以矩阵$A$的向量序列$x_0, x_1, x_2, &amp;hellip;$来逼近$A$的一个特征向量。幂法中的迭代公式如下：
$$ x_{k+1}=\frac{Ax_k}{|Ax_k|} $$
其中，$x_0$是一个任意的列向量，$|\cdot|$表示向量的二范数。
幂法的收敛性取决于矩阵$A$的特征值的大小关系。具体地，如果$A$的特征值按绝对值从大到小排序为$|\lambda_1|\ge|\lambda_2|\ge&amp;hellip;\ge|\lambda_n|$，那么幂法产生的向量序列满足：
$$ \lim_{k\to\infty}\frac{x_{k+1}}{x_k}=\frac{v_1}{|v_1|} $$
其中，$v_1$是$A$的模长最大的特征向量。因此，幂法可以用于求解模长最大的特征值和对应的特征向量。
8.2.2. 加速方法 幂法的缺点是收敛速度很慢。为了加速幂法的收敛，可以使用以下两种加速方法：
反迭代：将幂法迭代公式中的$A$替换为$(A-\mu I)^{-1}$，其中$\mu$是一个与$v_1$相近的数。这样可以加速收敛速度，并且可以通过选择不同的$\mu$来求解不同的特征向量。 QZ迭代：将矩阵$A$相似变换为一个拟三角形矩阵，然后使用幂法对拟三角形矩阵进行迭代。这种方法可以加速收敛速度，并且可以同时求解多个特征向量。 8.2.3. 反幂法 反幂法是求解特征值和对应特征向量的一种迭代方法。反幂法的基本思想是：通过不断地求解线性方程组$(A-\mu I)x_{k+1}=y_k$来逼近$A$的一个特征向量。反幂法中的迭代公式如下：
$$ x_{k+1}=(A-\mu I)^{-1}y_k $$
其中，$y_k$是一个任意的列向量，$\mu$是一个与$v_1$相近的数。
反幂法的收敛性取决于矩阵$A$的特征值的大小关系。具体地，如果$A$的特征值按绝对值从大到小排序为$|\lambda_1|&amp;gt;|\lambda_2|\ge&amp;hellip;\ge|\lambda_n|$，那么反幂法产生的向量序列满足：
$$ \lim_{k\to\infty}\frac{x_k}{\lambda_1^k}=\frac{v_1}{|v_1|} $$
其中，$v_1$是$A$的模长最大的特征向量。因此，反幂法可以用于求解模长最小的特征值和对应的特征向量。
8.3. 正交变换与矩阵分解 在矩阵计算中，正交变换和矩阵分解是非常重要的概念和工具。本章将介绍豪斯赫尔德变换、吉文斯变换、QR分解和舒尔分解等内容。
8.3.1. 豪斯赫尔德变换 豪斯赫尔德变换（Householder transformation）是一种常见的正交变换。豪斯赫尔德变换可以将一个$n$维向量$x$变换为一个$n$维向量$y$，使得$y$的前$m$个分量等于$x$的前$m$个分量，而$y$的后$n-m$个分量为$0$。
豪斯赫尔德变换的基本思想是：构造一个对称正交矩阵$P$，使得$Px=y$，其中$x$和$y$是两个$n$维向量。为了构造矩阵$P$，可以首先选取一个$n$维单位向量$v$，然后构造矩阵$P=I-2vv^T$，其中$I$是$n$阶单位矩阵。这样，矩阵$P$就可以将向量$x$映射到向量$y$，并且使得$y$的前$m$个分量等于$x$的前$m$个分量，而$y$的后$n-m$个分量为$0$。
豪斯赫尔德变换可以用于矩阵的QR分解和线性方程组的求解等问题。
8.3.2. 吉文斯变换 吉文斯变换（Givens rotation）是一种常见的正交变换。吉文斯变换可以将一个$n$维向量$x$变换为一个$n$维向量$y$，使得$y$的第$i$个分量等于$x$的第$i$个分量和第$j$个分量的线性组合，而$y$的其他分量与$x$的相同。
吉文斯变换的基本思想是：构造一个对称正交矩阵$G$，使得$Gx=y$，其中$x$和$y$是两个$n$维向量。为了构造矩阵$G$，可以首先选取一个$n$维单位向量$e_i$和$e_j$，然后构造矩阵$G$，使得$Ge_i$和$Ge_j$分别等于$c_ie_i+s_je_j$和$-s_ie_i+c_je_j$，其中$c_i$和$s_j$是两个满足$c_i^2+s_i^2=1$和$c_j^2+s_j^2=1$的实数。这样，矩阵$G$就可以将向量$x$映射到向量$y$，并且使得$y$的第$i$个分量等于$x$的第$i$个分量和第$j$个分量的线性组合，而$y$的其他分量与$x$的相同。
吉文斯变换可以用于矩阵的QR分解和线性方程组的求解等问题。
8.3.3. 矩阵的QR分解与舒尔分解 矩阵的QR分解是将一个$n$阶矩阵$A$分解为一个正交矩阵$Q$和一个上三角矩阵$R$的乘积$A=QR$的过程。QR分解可以用于求解线性方程组、最小二乘问题和特征值问题等问题。</description>
    </item>
    
    <item>
      <title>数值计算方法:7-非线性方程与方程组的数值解法</title>
      <link>https://http://www.leocl.space/post/2022/06/13/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%957-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E4%B8%8E%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/06/13/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%957-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E4%B8%8E%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/</guid>
      <description>7.1. 方程求根与二分法 7.1.1. 引言 在数学中，函数的根（或零点）是指函数的值为0的点。寻找函数的根是数值分析中的重要问题，因为它在科学和工程中有着广泛的应用。通常情况下，函数的根无法用解析方法求出，因此需要采用数值方法来计算。
其中，二分法是求解非线性方程的最基本的数值方法之一。
7.1.2. 二分法 假设$f(x)$在$x=a$和$x=b$之间连续，并且$f(a)$与$f(b)$的符号不同，即$f(a)·f(b)&amp;lt;0$。则$f(x)$在$(a,b)$内至少有一个根。
假设$c=\frac{a+b}{2}$，则$f(c)$的符号与$f(a)$或$f(b)$的符号不同。
因此，可以把区间$[a,b]$不断地分成两半，如果$f(c)=0$，则$c$就是函数的根；如果$f(c)$与$f(a)$的符号相同，则$f(c)$的根在区间$[c,b]$中；否则在区间$[a,c]$中。这个过程不断重复，直到找到函数的根或者区间足够小。
二分法的基本思想如下：
选取区间$[a,b]$，使得$f(a)$和$f(b)$的符号不同。 令$c=\frac{a+b}{2}$，计算$f(c)$的值。 如果$f(c)=0$，则$c$是函数的根。 如果$f(c)$与$f(a)$的符号相同，则在区间$[c,b]$中继续寻找根。 如果$f(c)$与$f(b)$的符号相同，则在区间$[a,c]$中继续寻找根。 重复上述步骤，直到找到函数的根或者区间足够小。 二分法的数学公式为：
给定函数$f(x)$，在区间$[a,b]$内求解方程$f(x)=0$，其中$a,b$满足$f(a)·f(b)&amp;lt;0$，$c=\frac{a+b}{2}$，则有：
如果$f(c)=0$，则$c$是函数的根； 如果$f(c)$与$f(a)$的符号相同，则在区间$[c,b]$中继续寻找根； 如果$f(c)$与$f(b)$的符号相同，则在区间$[a,c]$中继续寻找根。 7.2. 不动点迭代法及其收敛性 7.2.1. 不动点与不动点迭代法 不动点是指函数$f(x)$中满足$x=f(x)$的点，即$f(x)$的根。
不动点迭代法的基本思想是：通过逐次迭代，将初始值$x_0$带入函数$f(x)$中，得到下一个逼近值$x_1=f(x_0)$，然后将$x_1$再带入函数$f(x)$中，得到$x_2=f(x_1)$，以此类推，直到达到一定的精度要求或迭代次数达到上限。
不动点迭代法的数学公式为：
对于方程$x=f(x)$，给定初始值$x_0$，则逐次迭代得到：
$x_{n+1}=f(x_n), n=0,1,2,&amp;hellip;$
如果序列${x_n}$收敛到x*，则$x^*$是方程$x=f(x)$的一个根。
7.2.2. 不动点的存在性与迭代法的收敛性 不动点迭代法的成功与否，主要取决于不动点的存在性和迭代法的收敛性。
对于不动点的存在性，需要满足以下条件：
$f(x)$在区间$[a,b]$内连续； 在区间$[a,b]$内，$f(x)$存在一个不动点x*，即$x^=f(x^)$。 对于迭代法的收敛性，需要满足以下条件：
${x_n}$收敛到$x^*$； 在x*的某个邻域内存在一个连续函数 $\varphi(x)$，使得$\varphi(x^*)=x^*$且$\varphi(x)$在该邻域内单调，并且$\lim_{n\rightarrow \infty}|\varphi&#39;(x_n)|\leq k&lt;1$。 其中，$k$为迭代法的收敛速度。
7.2.3. 局部收敛性与收敛阶 不动点迭代法的局部收敛性指，对于某些初始值$x_0$，迭代&amp;lt;法可以收敛到不动点x*，但对于其他初始值，则可能无法收敛到$x^*$。
收敛阶指，逐次迭代后，$\{x_n\}$与不动点$x^*$之间的误差的减小速度。如果$\lim_{n\rightarrow \infty}\frac{|x_{n+1}-x^*|}{|x_n-x^*|^p}=C$，则称不动点迭代法的收敛阶为$p$，其中$C$为常数。 7.3. 迭代收敛的加速方法 在迭代求解问题时，可能会出现收敛速度较慢的情况。为了加快迭代的收敛速度，可以采用一些加速方法。本章将介绍两种比较常用的加速方法：埃特金加速收敛方法和斯特芬森迭代法。
7.3.1. 埃特金加速收敛方法 埃特金加速收敛方法是一种经典的迭代加速方法，它的基本思想是通过递推构造一个新的数列，使得该数列的极限值等于原数列的极限值，并且收敛速度更快。具体的递推公式如下：
$$ x_{n+1} = x_n + \frac{1}{\frac{1}{x_n-x_{n-1}}-\frac{1}{x_{n}-x_{n-1}}} $$
其中，$x_n$ 表示原数列的第 $n$ 项，$x_{n+1}$ 表示加速后数列的第 $n+1$ 项，$x_{n-1}$ 表示原数列的第 $n-1$ 项。</description>
    </item>
    
    <item>
      <title>数值计算方法:6-解线性方程组的迭代法</title>
      <link>https://http://www.leocl.space/post/2022/05/28/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%956-%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E6%B3%95/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/05/28/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%956-%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E6%B3%95/</guid>
      <description>6.1 迭代法的基本概念 6.1.1 引言 在实际问题中，线性方程组的解往往不是直接求解得到的，而是通过一些迭代算法来逐步逼近解。迭代法是一种通过递推公式，将原问题转化为逐步逼近的问题，最终达到精度要求的方法。本章将介绍解线性方程组的迭代法。
6.1.2 向量序列与矩阵序列的极限 在迭代法中，我们需要研究向量序列和矩阵序列的极限。设${x_k}$是向量序列，${A_k}$是矩阵序列，${b_k}$是常向量序列，若存在向量$x$，使得$\lim\limits_{k \to \infty}x_k=x$，则称向量序列${x_k}$收敛于向量$x$，记作$x_k \to x$。若存在矩阵$A$，使得$\lim\limits_{k \to \infty}A_k=A$，则称矩阵序列${A_k}$收敛于矩阵$A$，记作$A_k \to A$。
6.1.3 迭代法及其收敛性 设$Ax=b$是线性方程组，$A=D-L-U$，其中$D$为$A$的对角线矩阵，$L$为$A$的下三角矩阵，$U$为$A$的上三角矩阵，若$\det(D) \neq 0$，则原方程组的解为$x=A^{-1}b$。考虑用迭代法求解该方程组，即构造如下迭代格式：
$x^{(k+1)}=Mx^{(k)}+N$
其中，$M$为系数矩阵，$N$为常向量，$x^{(k)}$为第$k$次迭代的解向量。将$x^{(k+1)}$代入迭代公式得：
$x^{(k+1)}=Mx^{(k)}+N=M(Mx^{(k-1)}+N)+N=M^2x^{(k-1)}+(I+M)N=M^3x^{(k-2)}+(I+M+M^2)N=\cdots$
可知，第$k$次迭代的解向量可表示为：
$x^{(k)}=M^kx^{(0)}+(I+M+M^2+\cdots+M^{k-1})N$
其中，$x^{(0)}$为初值向量。为保证迭代法的收敛性，需要满足$||M||&amp;lt;1$，其中$||\cdot||$为矩阵范数。若$||M||&amp;lt;1$，则对任意初值向量$x^{(0)}$，迭代序列${x^{(k)}}$均收敛于方程组的解$x$。
常见的迭代法有Jacobi迭代法、Gauss-Seidel迭代法和超松弛迭代法。其中，Jacobi迭代法和Gauss-Seidel迭代法是最基本的线性方程组迭代法，超松弛迭代法是在Gauss-Seidel迭代法的基础上引入松弛因子进行加速的算法。
6.2 雅克比迭代法与高斯-赛德尔迭代法 6.2.1 雅克比迭代法 Jacobi迭代法是一种最基本的线性方程组迭代法。设线性方程组$Ax=b$，其中
$A=[a_{ij}]_{n \times n}$，$b=[b_i]_{n \times 1}$ ，则方程组可以表示为： $\begin{cases} a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b_1 \\ a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b_2 \\ \cdots \\ a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=b_n \end{cases}$ 为了方便计算，我们将方程组表示为矩阵形式$Ax=b$，即： $\begin{bmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \end{bmatrix} \begin{bmatrix} x_1 \\ x_2 \\ \vdots \\ x_n \end{bmatrix} = \begin{bmatrix} b_1 \\ b_2 \\ \vdots \\ b_n \end{bmatrix}$ Jacobi迭代法的基本思想是将$A$分解为$A=D-L-U$，其中$D$为$A$的对角线矩阵，$L$为$A$的下三角矩阵，$U$为$A$的上三角矩阵。将方程组表示为： $(D-L-U)x=b$</description>
    </item>
    
    <item>
      <title>数值计算方法:5-解线性方程的直接方法</title>
      <link>https://http://www.leocl.space/post/2022/05/02/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%955-%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/05/02/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%955-%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%96%B9%E6%B3%95/</guid>
      <description>5.1. 引言与预备知识 5.1.1. 引言 解线性方程组是数学中一个重要的问题，它的应用非常广泛，涉及到物理、工程、经济等领域。直接方法是解线性方程组的一种基本方法，它的思想是通过一系列的基本变换，将线性方程组转化为一个简单的形式，然后求解出未知数的值。
5.1.2. 向量和矩阵 向量是一个有序数组，通常用列向量的形式表示，例如：
$$ \boldsymbol{x} = \begin{bmatrix} x_1 \\ x_2 \\ \vdots \\ x_n \end{bmatrix} $$ 矩阵是一个由数个数排成的矩形，通常用大写字母表示，例如： $$ A = \begin{bmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn} \end{bmatrix} $$ 矩阵可以进行加、减、数乘、矩阵乘法等运算。矩阵乘法的定义是： 设 $A$ 是 $m \times n$ 的矩阵，$B$ 是 $n \times p$ 的矩阵，那么 $A$ 与 $B$ 的乘积 $C = AB$ 是一个 $m \times p$ 的矩阵，其中：</description>
    </item>
    
    <item>
      <title>数值计算方法:4-数值积分与数值微分</title>
      <link>https://http://www.leocl.space/post/2022/04/19/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%954-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86%E4%B8%8E%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/04/19/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%954-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86%E4%B8%8E%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/</guid>
      <description>4.1. 数值积分概论 4.1.1. 数值积分的基本思想 设 $[a,b]$ 为积分区间，$x_0=a,x_1,x_2,\cdots,x_n=b$ 为区间的 $n+1$ 个分点，将积分区间划分为 $n$ 个小间 $[x_{k-1},x_k]$，则积分的近似值可以表示为：
$\int_{a}^{b} f(x) dx \approx \sum_{k=1}^{n} \int_{x_{k-1}}^{x_k} f(x) dx$
对于每个小区间 $[x_{k-1},x_k]$，可以采用近似公式来计算积分值，例如梯形公式、辛普森公式等，积分的近似值为：
$\int_{a}^{b} f(x) dx \approx \sum_{k=1}^{n} \int_{x_{k-1}}^{x_k} P(x) dx$
其中 $P(x)$ 为取代 $f(x)$ 的多项式函数，其次数和系数由近似公式确定，例如梯形公式中 $P(x)$ 为一次多项式，辛普森公式中 $P(x)$ 为二次多项式。
4.1.2. 代数精度的概念 数值积分的代数精度是指采用某个近似公式计算积分时，所得到的积分值与精确积分值之差的最高阶导数有关。设 $I(f)$ 为精确积分值，$I_n(f)$ 为采用 $n$ 阶近似公式计算得到的积分值，则其代数精度为 $p$ 当且仅当存在一个正整数 $m$，使得对于所有 $f(x) \in C^{m+1}[a,b]$，有：
$I(f) - I_n(f) = O(h^{p+m})$
其中 $h$ 为区间划分的最大长度。
4.1.3. 插值型的求积公式 插值型的求积公式采用插值多项式 $P(x)$ 来代替被积函数 $f(x)$，然后计算插值多项式在积分区间上的积分值。例如，梯形公式和辛普森公式就是插值型的求积公式。
梯形公式的插值多项式为：
$P(x) = \frac{f(x_{k-1}) + f(x_k)}{2} + \frac{f&amp;rsquo;&amp;rsquo;(\xi)}{12}(x-x_{k-1})(x-x_k)$</description>
    </item>
    
    <item>
      <title>数值计算方法:3-函数逼近与快速傅里叶变换</title>
      <link>https://http://www.leocl.space/post/2022/04/05/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%953-%E5%87%BD%E6%95%B0%E9%80%BC%E8%BF%91%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/04/05/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%953-%E5%87%BD%E6%95%B0%E9%80%BC%E8%BF%91%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</guid>
      <description>3.1. 函数逼近的基本概念 函数逼近是指用一个函数序列来逼近另一个函数的过程。在实际应用中，我们经常需要用一个简单的函数来近似描述一个复杂的函数，这时就需要用到函数逼近的方法。
3.1.1. 函数逼近与函数空间 函数逼近的基本思想是将要逼近的函数表示为一个函数空间中的元素，然后在该函数空间中寻找一个函数序列，使得该序列能够逼近要求的函数。
函数空间是指由一组函数构成的集合，这些函数通常具有某些共同的性质。例如，所有连续函数构成的集合就是一个函数空间，所有可微函数构成的集合也是一个函数空间。
函数空间中的函数序列通常是由一组基函数线性组合而成的，即
$f(x)=\sum_{i=1}^n c_i\phi_i(x)$
其中，$\phi_i(x)$是基函数，$c_i$是待定系数。
在函数空间中，每个元素都可以看作是一个函数，而每个函数都可以表示为无限个基函数的线性组合，所以函数空间是无限维的向量空间。
3.1.2. 范数与赋范线性空间 范数是一个将向量映射到非负实数的函数，它满足以下条件：
非负性：对于任意向量$x$，有$\left|x\right|\geq 0$，且$\left|x\right|=0$当且仅当$x=0$。 齐次性：对于任意向量$x$和任意实数$a$，有$\left|ax\right|=|a|\left|x\right|$。 三角不等式：对于任意向量$x$和$y$，有$\left|x+y\right|\leq\left|x\right|+\left|y\right|$。 赋范线性空间是指一个向量空间配备了一个范数的空间。例如，在向量空间中，我们通常使用$L^p$范数来度量向量的大小，即
$$ |x|_p=(|x_1|^p+|x_2|^p+&amp;hellip;+|x_n|^p)^{\frac{1}{p}} $$
其中$|x_i|$表示$x_i$的绝对值。当$p=2$时，$L^p$范数就是我们熟知的欧几里得范数，即向量的长度。当$p=1$时，$L^p$范数就是所有元素绝对值的和，也被称为曼哈顿距离或者城市街区距离。
在函数空间中，$L^p$范数被定义为：
$\left|f\right|_p=\left(\int_a^b|f(x)|^pdx\right)^{\frac{1}{p}}$
其中，$a$和$b$是函数的定义域，$p$是一个正实数。
3.1.3. 内积与内积空间 内积是一个将两个向量映射到一个实数的函数，它满足以下条件：
对称性：对于任意向量$x$和$y$，有$\left&amp;lt;x,y\right&amp;gt;=\left&amp;lt;y,x\right&amp;gt;$。 线性性：对于任意向量$x$、$y$和任意实数$a$、$b$，有$\left&amp;lt;a x+b y,z\right&amp;gt;=a\left&amp;lt;x,z\right&amp;gt;+b\left&amp;lt;y,z\right&amp;gt;$。 正定性：对于任意非零向量$x$，有$\left&amp;lt;x,x\right&amp;gt; &amp;gt;0$。 内积空间是指一个向量空间配备了一个内积的空间。例如，为了度量在欧几里德空间中向量之间的相似度和夹角大小，我们通常使用欧几里得空间内积。在欧几里得空间中，两个向量$x$和$y$的内积可以表示为：
$(x,y) = \sum_{i=1}^n x_iy_i$
其中，$x_i$和$y_i$分别表示向量$x$和$y$的第$i$个分量，$n$表示向量的维度。
相似地，在函数空间中，我们通常使用$L^2$内积来度量函数之间的相似度，即
$\left(f,g\right)=\int_a^bf(x)g(x)dx$
3.1.4. 最佳逼近 最佳逼近是指在函数空间中寻找一个函数序列，使得该序列能够最小化与要求函数之间的距离。在$L^2$空间中，最佳逼近可以通过求解正交投影问题来实现。
设$f$为$L^2$空间中的一个函数，${\phi_i}$为$L^2$空间中的一组正交基函数，$g$为$L^2$空间中的一个函数序列，我们的目标是找到一个函数序列${g_n}$，使得${g_n}$能够最小化$f-g_n$的$L^2$范数。
根据正交投影的定义，类似于向量空间中的正交投影，我们可以将$f$在${\phi_i}$上正交投影得到
$f=\sum_{i=1}^\infty\frac{\left&amp;lt;f,\phi_i\right&amp;gt;}{\left&amp;lt;\phi_i,\phi_i\right&amp;gt;}\phi_i$
令$g_n=\sum_{i=1}^n\frac{\left&amp;lt;f,\phi_i\right&amp;gt;}{\left&amp;lt;\phi_i,\phi_i\right&amp;gt;}\phi_i$，则有
$\left|f-g_n\right|^2=\left|f-\sum_{i=1}^n\frac{\left&amp;lt;f,\phi_i\right&amp;gt;}{\left&amp;lt;\phi_i,\phi_i\right&amp;gt;}\phi_i\right|^2=\left|\sum_{i=n+1}^\infty\frac{\left&amp;lt;f,\phi_i\right&amp;gt;}{\left&amp;lt;\phi_i,\phi_i\right&amp;gt;}\phi_i\right|^2$
由于${\phi_i}$是正交基函数，因此有
$\left|f-g_n\right|^2=\sum_{i=n+1}^\infty\frac{\left|\left&amp;lt;f,\phi_i\right&amp;gt;\right|^2}{\left&amp;lt;\phi_i,\phi_i\right&amp;gt;^2}$
因此，我们可以通过求解上式的最小值来得到最佳逼近函数序列${g_n}$。
3.2. 正交多项式 在数学中，正交多项式是一类特殊的多项式函数，它们在一定的权函数下满足正交性质。正交多项式在数学和物理学中有广泛的应用，例如在傅里叶级数、微积分、量子力学等领域。
3.2.1. 正交函数族 正交函数族是指一组函数，它们在一定的权函数下满足正交性质。具体来说，对于一组函数$f_n(x)$，如果它们在权函数$\rho(x)$下满足以下条件：
$\int_a^b \rho(x)f_n(x)f_m(x)dx=\begin{cases}0&amp;n\neq m\\c_n&amp;n=m\end{cases}$ 其中$c_n$是一个常数，$a$和$b$是积分区间，则称$f_n(x)$是在权函数$\rho(x)$下的正交函数族。 若
$\left\{f_n(x)\right\}_0^{\infty}$ 是$[a, b]$上带权 $\rho(x)$ 的正交多项式, 则 $n \geqslant 0$ 有递推关系： $$ f_{n+1}(x)=\left(x-\alpha_n\right) f_n(x)-\beta_n f_{n-1}(x), \quad n=0,1, \cdots $$</description>
    </item>
    
    <item>
      <title>数值计算方法:2-插值法</title>
      <link>https://http://www.leocl.space/post/2022/03/22/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%952-%E6%8F%92%E5%80%BC%E6%B3%95/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/03/22/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%952-%E6%8F%92%E5%80%BC%E6%B3%95/</guid>
      <description>2.1 引言 2.1.1 插值问题的提出 在数值计算中，经常需要在一些已知数据点之间进行插值，即求出一个函数在这些点上的取值，这个问题被称为插值问题。插值问题的应用非常广泛，例如在科学计算中，需要通过实验数据来拟合出一个函数模型，以便进行预测和分析；在工程计算中，需要通过已知数据点来计算出某些未知参数的值。
2.1.2 多项式插值 多项式插值是一种常用的插值方法，它的基本思想是通过已知数据点构造一个多项式函数，使得这个多项式函数在这些点上与原函数的值相等。多项式插值的优点是简单易用，计算速度快，但是它也存在一些缺点，例如多项式插值可能会出现龙格现象，即在插值点附近出现振荡现象，这会导致插值函数的精度下降。
2.2 拉格朗日插值 2.2.1 线性插值与抛物线插值 线性插值和抛物线插值是最简单的插值方法，它们分别对应于一次和二次多项式插值。
线性插值是通过已知的两个数据点 $(x_0, y_0)$ 和 $(x_1, y_1)$ 来构造一个一次多项式函数 $P_1(x)$，使得 $P_1(x_0) = y_0$，$P_1(x_1) = y_1$。根据一次多项式的形式，$P_1(x)$ 可以表示为：
$$ P_1(x) = y_0 + \frac{y_1 - y_0}{x_1 - x_0}(x - x_0) $$
抛物线插值是通过已知的三个数据点 $(x_0, y_0)$，$(x_1, y_1)$ 和 $(x_2, y_2)$ 来构造一个二次多项式函数 $P_2(x)$，使得 $P_2(x_0) = y_0$，$P_2(x_1) = y_1$，$P_2(x_2) = y_2$。根据二次多项式的形式，$P_2(x)$ 可以表示为：
$$ P_2(x) = y_0\frac{(x - x_1)(x - x_2)}{(x_0 - x_1)(x_0 - x_2)} + y_1\frac{(x - x_0)(x - x_2)}{(x_1 - x_0)(x_1 - x_2)} + y_2\frac{(x - x_0)(x - x_1)}{(x_2 - x_0)(x_2 - x_1)} $$</description>
    </item>
    
    <item>
      <title>数值计算方法:1-导言</title>
      <link>https://http://www.leocl.space/post/2022/03/21/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%951-%E5%AF%BC%E8%A8%80/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://http://www.leocl.space/post/2022/03/21/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%951-%E5%AF%BC%E8%A8%80/</guid>
      <description>本系列是基于清华大学《数值分析》的简明教程，该系列被设计为尽可能全面但不详细讲解每部分内容，以便于复习和快速检阅内容。由于作者水平有限，难免存在疏忽，敬请斧正。
另附原书目录：
第1章绪论（1）
1.1数值分析研究对象与特点（1）
1.2数值计算的误差（3）
1.2.1误差来源与分类（3）
1.2.2误差与有效数字（4）
1.2.3数值运算的误差估计（8）
1.3误差定性分析与避免误差危害（10）
1.3.1病态问题与条件数（11）
1.3.2算法的数值稳定性（12）
1.3.3避免误差危害的若干原则（14）
评注（18）
习题（18）
第2章插值法（21）
2.1引言（21）
2.2拉格朗日插值（23）
2.2.1线性插值与抛物插值（23）
2.2.2拉格朗日插值多项式（26）
2.2.3插值余项与误差估计（28）
2.3均差与牛顿插值公式（31）
2.3.1均差及其性质（31）
2.3.2牛顿插值公式（33）
2.4差分与等距节点插值（35）
2.4.1差分及其性质（35）
2.4.2等距节点插值公式（38）
2.5埃尔米特插值（41）
2.6分段低次插值（45）
2.6.1高次插值的病态性质（45）
2.6.2分段线性插值（47）
2.6.3分段三次埃尔米特插值（48）
2.7三次样条插值（51）
2.7.1三次样条函数（51）
2.7.2样条插值函数的建立（52）
2.7.3误差界与收敛性（57）
评注（58）
习题（58）
第3章函数逼近与曲线拟合（61）
3.1函数逼近的基本概念（61）
3.1.1函数逼近与函数空间（61）
3.1.2范数与赋范线性空间（64）
3.1.3内积与内积空间（65）
3.2正交多项式（69）
3.2.1正交函数族与正交多项式（69）
3.2.2勒让德多项式（71）
3.2.3切比雪夫多项式（74）
3.2.4其他常用的正交多项式（77）
3.3最佳一致逼近多项式（78）
3.3.1基本概念及其理论（78）
3.3.2最佳一次逼近多项式（81）
3.4最佳平方逼近（83）
3.4.1最佳平方逼近及其计算（83）
3.4.2用正交函数族作最佳平方逼近（87）
3.5曲线拟合的最小二乘法（90）
3.5.1最小二乘法及其计算（90）
3.5.2用正交多项式做最小二乘拟合（96）
3.6最佳平方三角逼近与快速傅里叶变换（99）
3.6.1最佳平方三角逼近与三角插值（99）
3.6.2快速傅氏变换（FFT）（102）
3.7有理逼近（108）
3.7.1有理逼近与连分式（108）
3.7.2帕德逼近（110）
评注（114）
习题（115）
第4章数值积分与数值微分（118）
4.1引言（118）
4.1.1数值求积的基本思想（118）
4.1.2代数精度的概念（120）
4.1.3插值型的求积公式（121）
4.1.4求积公式的收敛性与稳定性（122）</description>
    </item>
    
  </channel>
</rss>
